// 算法复杂度
1: 时间复杂度 -- 计算机运行一个算法时，程序代码被执行的总次数

-- 表示输入规模为n，对应的代码执行的总次数可以用一个表达式表示
eg：T(n) = O(2n**2 + 4n + 4) 
时间复杂度关心的数量级，所以对于表达式我们可以进行简化。
1.略去常数。
2.只保留最高阶的项
3.变量最高阶的系数为1

so：T(n) = O(n**2)

我们只关心程序代码中最内层循环的次数即可                                                                                                            
常用时间复杂度
O(1) < O(logn) < O(n) < O(nlogn) < O(n**2) < O(n**3) < O(2**n) < O(n!) < O(n**n)

最好时间复杂度，平均时间复杂度，最坏时间复杂度。-- 一般考虑平均和最坏

递归时间复杂度：递归的深度 * 单次代码的复杂度(或者整体求平均)

-- 以上对于时间复杂度的理解，只是简单粗略的估计，真正的理解精确或许真的需要高等数学



2.空间复杂度 -- 和时间复杂度相似，一个时对于指令执行的次数的估计，另一个是对运行期间 申明变量所占空间的估计

注: 递归函数的时间复杂度
递归函数嵌套调用自己，函数的参数和局部变量占用内存空间在递去的过程中会持续增长(其实就是压栈)
在归来的时候才逐层释放。当递归的深度达到一定量级，可能会造成栈内存空间不足的情况。





