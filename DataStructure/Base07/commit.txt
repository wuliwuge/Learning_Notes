树和二叉树

树的定义
树型结构是非线性的数据结构，是以分支 关系定义的层次结构。

树(tree) 是n（n>=0）个结点的有限集合，n=0表示空树

在任意一个非空树中：
1）只有一个根结点
2）当n>1时，其余结点可分为m（m>0）个互不相交的
有限集合，每个集合又是一个子树（subtree）

    *树中的每个结点有零个或多个后继结点 --》定义的一般树，而非二叉树
    *除了根结点，每个结点只有一个前驱结点。

                     A               第一层
                  /  |  \ 
                 B   c    D          第二层
               /  \      /  \ 
              E    F    H    I       第三层
            /  \            / \ 
           J    K          L   M     第四层

基本术语：
节点的度（叉）：树中结点拥有的子树的个数(有几个儿子)。
度（degree）为0的结点称为叶子结点(leaf) 或终端结点。
度不为0的结点称为非终端结点或分支结点。
除了根节点和叶子结点外，其他的分支结点也称为内部结点。

树的度（叉）：树中全部结点的度中最大的那个度（不是求和）
是求某一个结点的度的最大值。

。。。。。。。。

结点的层次（levl）上述三叉树中为4层，一般把根作为第一层。但有的作为第0层。

边：一棵n个结点的树有n-1条边
因为除了根结点外，每个结点都有唯一的一个父亲，所以就是n-1了。

路径：从结点n1到结点ni的结点序列，路径的长度为该路径上的边的条数。
即n-1。从根到每个结点恰好存在一条路径。

结点的深度：从根到当前结点的路径长度。根节点的深度是0，
上图B和C的深度是1，E的深度是2

结点的高度：从当前结点到叶结点最长路径的长度。
全部树的叶结点的高度为0.上图B的高度为2，
C的高度为1. --》怎么感觉应该是0啊

一棵树的深度等于它的最深树叶的深度，该深度
总等于这棵树的高度。

注：严魏敏中
1）结点的层次是从1开始的。
2）没有对结点深度和高度作出解释
3）但却有这么一段话的描述：书中结点最大的层次称为树的深度或高度


森林。。。


树的性质
1）树中的结点总数等于所有结点的度加1
我的理解：和边一样有度（叉）就代表有边
边等于n-1，但不包含根节点所以加1

2）m叉树中第i（i>=1）层至多可以有m**(i-1) 个结点
                    A             第一层 2**(1-1)
                  /   \
                 B      C         第二层 2**(2-1)
               /   \   /  \
              D     E  F   G      第三层 2**(3-1) 
以上以二叉树为例解释

细节注意点：
度为m的树与m叉树的区别

度为m的树              |m叉树
全部结点的度<=m        |全部结点的度<=m
至少有一个结点的度为m   |可能全部结点的度都<m
既然树中结点最多的度为m | 树可以为空
那么树至少有m+1个结点   |eg：二叉树可以为空
解释m个儿子加一个老子

m叉树中的二叉树与度为二的有序树还有更多的区别，二叉树子节点有左右之分等。


3）高度为h（h>=1，h可以看做层）的m叉树至多有 (m**h - 1)/(m-1)个结点
以二叉树为例：
第一层 (2**1 - 1) / (2 - 1) = 1
第二层 (2**2 - 1) / (2 - 1) = 3
第三层 (2**3 - 1) / (2 - 1) = 7
可看做等比数列求和，--》但是爷忘记了哈哈哈
2**0 + 2**1 + 2**3 +...+ 2**(n-1)

4）具有n个结点的m叉树的最小高度为 logm(n(m-1)+1)。取上限，向上取整
是通过性质3推出来的
n = (m**h-1)/(m-1)
n(m-1) = (m**h-1)
n(m-1)+1 = m**h
logm(n(m-1)+1) = h

如果算出来的h假设等于3.2... 那么h等于4
我的理解：意味将每一层都填满，剩余的再到下一层。这样为层数最小

##########################################################

二叉树

二叉树（binary tree）是树型结构中最重要的类型，它的规律性强，应用广泛
二叉树的每个结点最多只能有两棵树，分别是左子树和右子树。
                      二叉树的五种基本形态
.          A                A                A                     A  
                           /                   \                 /   \
                          B                      B              B     C
(1)空树   (2)只有根节点   (3)只有左节点      (4)只有右结点       (5)左右子树都有

二叉树与度为2的有序树是有区别的，详见二叉排序树
这里简单解释一下，不论是二叉排序树还是完全二叉树，
其度为1的结点的子树来说。
完全二叉树是必须是左子树
儿叉排序树则根据子树的值与父结点的值得大小，来区分到底是左还是右
而度为2的有序树对于度为1的情况则没有任何左右之分。


满二叉树
一棵高度为h，且含有2**h - 1 个结点的二叉树称之为满二叉树
  A           A             A                                  1
            /   \         /   \                              /    \
           B     C       B     C                           2        3
                       /   \  /  \                        /  \     /  \
                      E     F G   H                     4     5    6    7
                                                      /   \  /  \ /  \  /  \
                                                     8    9 10 11 12 13 14  15 
最后一个满二叉树为例
对于编号i的结点，左子节点的编号为2i，右子节点的编号为2i+1，双亲结点(父节点)的编号为 i/2 向下取整


完全二叉树
一棵高度为h、有n个结点的完全二叉树，它的每个结点都与高度相同的满二叉树的结点编号一一对应。
我的理解：其实就是将满二叉树从大的结点向后删除。但是不能跳着删。
然后满二叉树也是特殊的完全二叉树。

         1
       /    \
     2        3
    /  \     /  \
   4     5    6    7
 /   \  /  \ /  
8    9 10 11 12 

1）对于编号为i的结点，其左子结点的编号为2i，右子结点的编号为2i+1，双亲结点的编号为 i/2 向下取整
2）若结点编号 i <= (n/2向下取整)，则该i结点为分支结点，否则为叶结点 --》不确定根结点是否在里面
3）如果编号为i的结点为叶结点或者只有左孩子，则编号大于i的结点都是叶子结点。
4）结点i所在的层次为 log2(i) 向下取整 再加1，
具有n个（n>0）结点的树高度为 log2(n+1) 向上取整，或者 log2(n) 向下取整再加1


二叉排序树（二叉搜索树）
树上任意结点如果存在左子树和右子树，则左子树上的所有结点的值都小于该结点，
右子树上所有结点元素的值都大于该结点。

                 10
               /    \
             5        15
           /   \     /   \
          3     7   12     16
         /  \  / \  /    
        1   4  6  9 11   

二叉树的性质
1）一棵非空的二叉树，n表示其结点总数，n0 表示度为0的结点树，
n1 表示度为1的结点树，n2 表示度为2的结点树。

注：以下我以 0代表度为0的结点 1代表度为1的结点 2代表度为2的结点
                    2
                  /   \
                 1      2
               /       /  \
              2       0    1
            /   \            \
           0     0            0

由于树有度为0为1为2的结点构成
则：n = n0 + n1 + n2

由前述中 结点n 等于 边长 + 1 且 度即多少条边，可知道
n = 1*n1 + 2*n2 + 0*n0 + 1
n = n1 + 2*n2 + 1

由上述两个公式可得
n0 = n2 + 1


2）一个非空的二叉树的第k层最多有 2**(k-1)个结点

3）高度为h的二叉树最多有2**h - 1 --》即是满二叉树的情况


// 20230523
// 二叉树的存储结构

用一组连续的存储单元依次自上而下、自左到右存储完全二叉树上的结点元素

         1                第一层
       /    \
     2        3           第二层
    /  \     /  \
   4     5    6    7      第三层
 /   \  /  \ /  
8    9 10 11 12           第四层

1.可以使用静态数组，也可以使用malloc在堆区分配一个连续的空间

索引：0  1  2  3  4  5  6  7  8  9  10  11
编号：1  2  3  4  5  6  7  8  9  10  11  12

对于编号为i的结点，左子结点的编号为2*i，右子结点的编号为2*i + 1，双亲结点的编号为 i/2 向下取整
对于下标为i的结点，左子结点的下标为2*i+1，右子结点的下标为2*i+2，双亲结点的编号为 (i-1)/2 向下取整


普通的二叉树的顺序存储

         1                
       /    \
     2        3           
    /  \     /  
   4     5    6         
 /         \ /  
7          8 9

如果是普通的二叉树，那么想要使用顺序空间来存储，且还可以保持上述二叉树的关系。
那么我们需要补齐它称为完全儿叉树。即，空的地方用0或者其他特殊值来填充

         1                
       /    \
     2        3           
    /  \     /  \
   4     5    6   0      
 /   \  /  \ /  
7     0 0  8 9
// 当前0指代特殊值，添加成空结点，补全完全二叉树

  1
   \
     2
       \
         3
           \
             4
               \
                 5
如果使用顺序存储的方式这样的普通二叉树，那么容易造成空间浪费，
顺序存储的方式比较适合完全二叉树。

/////////////////////////////////////////////////////////////////////
普通二叉树的链式存储

二叉树的数据结构
typedef int ElemType;  // 自定义链表数据元素为整数

typedef struct BiTNode
{
  ElemType data;            // 存放结点的数据元素
  struct BiTNode *lchild;   // 指向左子结点地址的指针
  struct BiTNode *rchild;   // 指向右子结点地址的指针
  struct BiTNode *parent;   // 指向双亲结点地址的指针 --> 如果加上这个就会变得简答，但是出题的人往往不会这么做。
}BiTNode, *BiTree;



             


